gst-launch-1.0 nvarguscamerasrc ! \
'video/x-raw(memory:NVMM),width=224,height=224,framerate=30/1' ! \
nvvidconv ! 'video/x-raw,format=I420' ! omxh264enc ! \
rtph264pay config-interval=1 pt=96 ! \
udpsink host=<ip_pc> port=8554
#######################################################################################################################################################################################################################"
import cv2
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst
import socket
import struct
import pickle

# Initialize GStreamer
Gst.init(None)

# Create a GStreamer pipeline to stream video via RTSP
pipeline = "nvarguscamerasrc ! video/x-raw(memory:NVMM), width=224, height=224, framerate=30/1 ! nvvidconv ! video/x-raw, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink"
cap = cv2.VideoCapture(pipeline, cv2.CAP_GSTREAMER)

# Configuration du socket pour envoyer les frames
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(('IP_DU_DESTINATAIRE', 8485))  # Remplacez IP_DU_DESTINATAIRE par l'IP de l'appareil de réception
connection = client_socket.makefile('wb')

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    # Sérialiser et envoyer l'image capturée
    data = pickle.dumps(frame)
    size = len(data)
    client_socket.sendall(struct.pack(">L", size) + data)

cap.release()
client_socket.close()
#######################################################################################################################################################################################################################"
